{"version":3,"sources":["components/WelcomeMessage/styles.module.css","components/Graph/Legend/styles.module.css","components/Header/style.module.css","components/Graph/MonthNode/styles.module.css","components/Graph/DayNode/styles.module.css","assets/logo.png","components/DataDigestion/styles.module.css","components/Graph/GraphNode/styles.module.css","components/Graph/styles.module.css","commons/strava-utils.js","components/Spinner/index.js","components/AuthCallback/index.js","components/InitAuth/index.js","components/Header/index.js","components/ProgressSteps/index.js","components/WelcomeMessage/index.js","components/DataDigestion/index.js","components/Graph/GraphNode/index.js","components/Graph/MonthNode/index.js","components/Graph/DayNode/index.js","components/Graph/Legend/index.js","components/Graph/index.js","components/WorkflowController/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","_athlete","userClient","graphData","initializeUserClient","access_token","Strava","client","getAthlete","completeAuthentication","code","a","console","log","oauth","getToken","athlete","processActivitiesData","per_page","before","Math","floor","Date","getTime","after","roundToPreviousSunday","page","currentBatch","allActivities","listActivities","length","computeGraphData","epochSecs","date","getDay","setDate","getDate","dayWiseData","today","normalizeDateToDay","afterDate","toLocaleString","split","initializeEmptyDataSctructure","forEach","activity","dataObj","start_date_local","activities","effortLevel","push","type","distanceBasedEffort","distance","getEffortLevel","slabDistance","tolerance","setMilliseconds","setSeconds","setMinutes","setHours","config","client_id","process","client_secret","redirect_uri","Spinner","props","className","spin","style","fontSize","AuthCallback","history","useHistory","useEffect","params","URLSearchParams","window","location","search","get","InitAuth","getRequestAccessURL","scope","Header","cx","styles","header","src","logo","logoImage","alt","Step","Steps","ProgressSteps","step","status","title","icon","Title","Typography","Text","WelcomeMessage","welcomeMessage","level","role","aria-label","sampleGraph","strong","connectText","onClick","DataDigestion","done","dataDigestion","effortToColor","5","4","3","2","1","GraphNode","day","disableHoverInfo","mouseLeaveDelay","mouseEnterDelay","round","reduce","acc","val","node","backgroundColor","MonthNode","month","monthNode","monthText","DayNode","dayText","Legend","legend","labelText","Graph","data","days","Object","keys","reverse","monthRunner","now","months","Array","from","map","setMonth","getMonth","shift","activitiesCount","React","useMemo","container","userInfoContainer","profile","userAvatar","userBasicInfo","firstname","lastname","userCity","city","country","graphContainer","graphSection","dayRunner","key","padding","graph","row","WorkflowController","useState","setStep","App","path","Boolean","hostname","match","Sentry","dsn","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff12450d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcomeMessage\":\"styles_welcomeMessage__1TKJu\",\"sampleGraph\":\"styles_sampleGraph__2t_wQ\",\"connectText\":\"styles_connectText__1YX2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"legend\":\"styles_legend__17u3L\",\"labelText\":\"styles_labelText__2u9Z9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"style_header__MlSQ_\",\"logoImage\":\"style_logoImage__1Hwfc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"monthNode\":\"styles_monthNode__1qqTP\",\"monthText\":\"styles_monthText__2UjKw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"day\":\"styles_day__2MEFe\",\"dayText\":\"styles_dayText__3nYRt\"};","module.exports = __webpack_public_path__ + \"static/media/logo.52946ee0.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataDigestion\":\"styles_dataDigestion__2SQFo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"node\":\"styles_node__1LXWE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3B2i6\",\"graphContainer\":\"styles_graphContainer__24ldH\",\"graphSection\":\"styles_graphSection__1023A\",\"graph\":\"styles_graph__RRI0v\",\"dayRunner\":\"styles_dayRunner__24Is6\",\"monthRunner\":\"styles_monthRunner__UAYNl\",\"userInfoContainer\":\"styles_userInfoContainer__1hAKg\",\"userAvatar\":\"styles_userAvatar__2Pi6L\",\"userBasicInfo\":\"styles_userBasicInfo__1onZ9\",\"userCity\":\"styles_userCity__LMxxX\"};","import Strava from 'strava-v3';\n\nlet _athlete = null;\nlet userClient = null;\nlet graphData = null;\n\nStrava.config({\n  client_id: process.env.REACT_APP_STRAVA_CLIENT_ID,\n  client_secret: process.env.REACT_APP_STRAVA_CLIENT_SECRET,\n  redirect_uri: process.env.REACT_APP_STRAVA_REDIRECT_URI,\n});\n\nfunction initializeUserClient(access_token) {\n  userClient = new Strava.client(access_token);\n}\n\nexport function getRequestAccessURL() {\n  return Strava.oauth.getRequestAccessURL({scope: 'activity:read'});\n}\n\nexport function getAthlete() {\n  return _athlete;\n}\n\nexport async function completeAuthentication(code) {\n  console.log('code:', code);\n  const {access_token, athlete} = await Strava.oauth.getToken(code);\n  console.log('access_token, athlete', access_token, athlete);\n  _athlete = athlete;\n  initializeUserClient(access_token);\n}\n\nexport async function processActivitiesData() {\n  const per_page = 50;\n  const before = Math.floor(new Date().getTime() / 1000);\n  const oneYearBack =\n    before - 60 /*secs*/ * 60 /*mins*/ * 24 /* hours*/ * 365; /*days*/\n  const after = roundToPreviousSunday(oneYearBack);\n  let page = 1;\n  let currentBatch = [];\n  let allActivities = [];\n  do {\n    currentBatch = await userClient.athlete.listActivities({\n      before,\n      after,\n      page,\n      per_page,\n    });\n    allActivities = [...allActivities, ...currentBatch];\n    page++;\n  } while (currentBatch.length === per_page);\n  graphData = computeGraphData(allActivities, before, after);\n}\n\nexport function roundToPreviousSunday(epochSecs) {\n  const date = new Date(epochSecs * 1000);\n  while (date.getDay() !== 0) {\n    date.setDate(date.getDate() - 1);\n  }\n  return date.getTime() / 1000;\n}\n\nexport function getGraphData() {\n  return graphData;\n}\n\nfunction computeGraphData(allActivities, before, after) {\n  const dayWiseData = initializeEmptyDataSctructure(before, after);\n  allActivities.forEach(activity => {\n    let dataObj = dayWiseData[activity.start_date_local.split('T')[0]];\n    if (!dataObj) {\n      dataObj = {};\n      dayWiseData[activity.start_date_local.split('T')[0]] = dataObj;\n    }\n    if (!dataObj.activities) {\n      dataObj.activities = [];\n      dataObj.effortLevel = 0;\n    }\n    dataObj.activities.push(activity);\n    dataObj.effortLevel += getEffortLevel(activity);\n  });\n  return dayWiseData;\n}\n\nfunction getEffortLevel(activity) {\n  const distanceTolerance = 300;\n  switch (activity.type) {\n    case 'Run':\n      return distanceBasedEffort(activity.distance, 5000, distanceTolerance);\n    case 'Ride':\n      return distanceBasedEffort(activity.distance, 10000, distanceTolerance);\n    case 'Walk':\n      return distanceBasedEffort(activity.distance, 7500, distanceTolerance);\n    default:\n      // Considering the effort is 1.5 for any other activity\n      return 1.5;\n  }\n}\n\nfunction distanceBasedEffort(distance, slabDistance, tolerance) {\n  if (distance === 0) {\n    return 0;\n  }\n  if (distance < slabDistance - tolerance) {\n    return 1;\n  }\n  return Math.floor((distance + tolerance) / slabDistance + 1);\n}\n\nfunction initializeEmptyDataSctructure(before, after) {\n  const today = new Date(before * 1000);\n  normalizeDateToDay(today);\n  const dayWiseData = {};\n  const afterDate = new Date(after * 1000);\n  normalizeDateToDay(afterDate);\n  for (\n    ;\n    today.getTime() >= afterDate.getTime();\n    today.setDate(today.getDate() - 1)\n  ) {\n    dayWiseData[today.toLocaleString('sv').split(' ')[0]] = {};\n  }\n  return dayWiseData;\n}\n\nfunction normalizeDateToDay(date) {\n  date.setMilliseconds(0);\n  date.setSeconds(0);\n  date.setMinutes(0);\n  date.setHours(0);\n}\n","import React from 'react';\nimport Icon from 'antd/es/icon';\n\nexport default function Spinner(props) {\n  return (\n    <Icon\n      className={`theme-color align-center ${props.className || ''}`}\n      type=\"loading-3-quarters\"\n      spin\n      style={{fontSize: '30px'}}\n    />\n  );\n}\n","import React, {useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {completeAuthentication} from '../../commons/strava-utils';\nimport Spinner from '../Spinner';\n\nexport default function AuthCallback(props) {\n  const history = useHistory();\n  useEffect(() => {\n    (async () => {\n      const params = new URLSearchParams(window.location.search);\n      await completeAuthentication(params.get('code'));\n      history.push(process.env.PUBLIC_URL);\n    })();\n  }, [history]);\n\n  return <Spinner />;\n}\n","import React, {useEffect} from 'react';\nimport {getRequestAccessURL} from '../../commons/strava-utils';\nimport Spinner from '../Spinner';\n\nexport default function InitAuth() {\n  useEffect(() => {\n    window.location = getRequestAccessURL();\n  }, []);\n  return <Spinner />;\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport styles from './style.module.css';\nimport logo from '../../assets/logo.png';\n\nexport default function Header() {\n  return (\n    <div className={cx(styles.header)}>\n      <img\n        src={logo}\n        className={cx(styles.logoImage)}\n        alt=\"Strava-Github-Like-Graph\"\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport Steps from 'antd/es/steps';\nimport Icon from 'antd/es/icon';\n\nconst {Step} = Steps;\n\nexport default function ProgressSteps({step}) {\n  return (\n    <Steps>\n      <Step\n        status={step < 2 ? 'process' : 'finish'}\n        title=\"Connect Strava\"\n        icon={<Icon type=\"user\" />}\n      />\n      <Step\n        status={step === 2 ? 'process' : step === 1 ? 'wait' : 'finish'}\n        title=\"Data Digestion\"\n        icon={<Icon type=\"experiment\" />}\n      />\n      <Step\n        status={step === 3 ? 'process' : 'wait'}\n        title=\"Visualize\"\n        icon={<Icon type=\"crown\" />}\n      />\n    </Steps>\n  );\n}\n","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\nimport Button from 'antd/es/button';\n\nimport styles from './styles.module.css';\n\nconst {Title, Text} = Typography;\n\nexport default function WelcomeMessage() {\n  const history = useHistory();\n  return (\n    <div className={cx(styles.welcomeMessage)}>\n      <Title level={3} className=\"theme-color text-center\">\n        Welcome!{' '}\n        <span role=\"img\" aria-label=\"party\">\n          🎉\n        </span>\n        <br />\n        Here is my Strava activities graph for last year:\n      </Title>\n      <img\n        alt=\"Sample graph\"\n        className={cx(styles.sampleGraph)}\n        src={`${process.env.PUBLIC_URL}/sample-graph.png`}\n      />\n      <Text strong className={cx('height-200', styles.connectText)}>\n        Curious to see how yours look? <br />\n        It is just a click away, connect your Strava account below to see yours!\n      </Text>\n      <Button\n        type=\"primary\"\n        icon=\"lock\"\n        className=\"top-space-medium\"\n        onClick={() => history.push('init-auth')}\n      >\n        Connect Strava to see yours!\n      </Button>\n    </div>\n  );\n}\n","import React, {useEffect} from 'react';\nimport cx from 'classnames';\nimport Spinner from '../Spinner';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\nimport {processActivitiesData} from '../../commons/strava-utils';\n\nconst {Title} = Typography;\n\nexport default function DataDigestion({done}) {\n  useEffect(() => {\n    (async () => {\n      await processActivitiesData();\n      done();\n    })();\n  }, [done]);\n  return (\n    <div className={cx(styles.dataDigestion)}>\n      <Title level={3} className=\"theme-color\">\n        Negotiating your data with Strava..\n      </Title>\n\n      <Spinner className=\"top-space-medium\" />\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Tooltip from 'antd/es/tooltip';\n\nimport styles from './styles.module.css';\n\nconst effortToColor = {\n  5: '#E34402',\n  4: '#E96935',\n  3: '#EE8F67',\n  2: '#F4B49A',\n  1: '#F9DACC',\n};\n\nexport default function GraphNode({\n  activities,\n  effortLevel,\n  day,\n  disableHoverInfo,\n}) {\n  return (\n    <Tooltip\n      mouseLeaveDelay={0}\n      mouseEnterDelay={0.05}\n      title={\n        disableHoverInfo\n          ? null\n          : `${\n              activities\n                ? `${activities.length} activit${\n                    activities.length === 1 ? 'y' : 'ies'\n                  } of ${Math.round(\n                    activities.reduce((acc, val) => (acc += val.distance), 0) /\n                      1000\n                  )}kms`\n                : 'No activities'\n            } on ${day}`\n      }\n    >\n      <div\n        className={cx(styles.node)}\n        style={{\n          backgroundColor:\n            effortToColor[effortLevel > 5 ? 5 : effortLevel] || '#efefef',\n        }}\n      ></div>\n    </Tooltip>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\n\nconst {Text} = Typography;\n\nexport default function MonthNode({month}) {\n  return (\n    <div className={cx(styles.monthNode)}>\n      <Text className={cx(styles.monthText)}>{month}</Text>\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\n\nconst {Text} = Typography;\n\nexport default function DayNode({day}) {\n  return (\n    <div className={cx(styles.day)}>\n      <Text className={cx(styles.dayText)}>{day}</Text>\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\nimport GraphNode from '../GraphNode';\n\nconst {Text} = Typography;\n\nexport default function Legend() {\n  return (\n    <div className={cx(styles.legend)}>\n      <Text className={cx(styles.labelText)}>Less</Text>\n      <GraphNode effortLevel={0} disableHoverInfo={true} />\n      <GraphNode effortLevel={1} disableHoverInfo={true} />\n      <GraphNode effortLevel={2} disableHoverInfo={true} />\n      <GraphNode effortLevel={3} disableHoverInfo={true} />\n      <GraphNode effortLevel={4} disableHoverInfo={true} />\n      <GraphNode effortLevel={5} disableHoverInfo={true} />\n      <Text className={cx(styles.labelText)}>More</Text>\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport GraphNode from './GraphNode';\nimport Typography from 'antd/es/typography';\nimport Avatar from 'antd/es/avatar';\nimport MonthNode from './MonthNode';\n\nimport styles from './styles.module.css';\nimport {getAthlete} from '../../commons/strava-utils';\nimport DayNode from './DayNode';\nimport Legend from './Legend';\n\nconst {Text} = Typography;\n\nexport default function Graph({data}) {\n  const athlete = getAthlete();\n  const days = Object.keys(data).reverse();\n  const monthRunner = new Date(days[0]);\n  const now = new Date();\n  const months = Array.from(Array(12)).map(() => {\n    const month = monthRunner.toLocaleString('default', {month: 'short'});\n    monthRunner.setMonth(monthRunner.getMonth() + 1);\n    return month;\n  });\n  if (now.getDate() > 14) {\n    months.push(months[0]);\n  }\n  if (now.getDate() > 21) {\n    months.shift();\n  }\n  const activitiesCount = React.useMemo(\n    () =>\n      Object.keys(data).reduce(\n        (acc, val) => (acc += (data[val].activities || []).length),\n        0\n      ),\n    [data]\n  );\n  return (\n    <>\n      <div className={cx(styles.container, 'top-space-medium')}>\n        <div className={cx(styles.userInfoContainer)}>\n          <Avatar src={athlete.profile} className={cx(styles.userAvatar)} />\n          <div className={cx(styles.userBasicInfo)}>\n            <Text strong>{`${athlete.firstname} ${athlete.lastname}`}</Text>\n            <Text\n              className={cx(styles.userCity)}\n            >{`${athlete.city}, ${athlete.country}`}</Text>\n          </div>\n        </div>\n        <div>\n          <Text>{activitiesCount} activities in the last year</Text>\n        </div>\n        <div className={cx(styles.graphContainer)}>\n          <div className={cx(styles.graphSection)}>\n            <div className={cx(styles.dayRunner)}>\n              {['Mon', 'Wed', 'Fri'].map(day => (\n                <DayNode day={day} key={day} />\n              ))}\n            </div>\n            <div>\n              <div\n                className={cx(styles.monthRunner)}\n                style={{padding: months.length > 12 ? 0 : '0 16px'}}\n              >\n                {months.map(month => (\n                  <MonthNode month={month} key={month} />\n                ))}\n              </div>\n              <div className={cx(styles.graph)}>\n                {days.map(day => (\n                  <GraphNode {...data[day]} key={day} day={day} />\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className={cx(styles.row)}>\n            <Legend />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {getAthlete, getGraphData} from '../../commons/strava-utils';\nimport ProgressSteps from '../ProgressSteps';\nimport WelcomeMessage from '../WelcomeMessage';\nimport DataDigestion from '../DataDigestion';\nimport Graph from '../Graph';\n\nexport default function WorkflowController(props) {\n  const athlete = getAthlete();\n  const [step, setStep] = useState(athlete == null ? 1 : 2);\n  return (\n    <>\n      <ProgressSteps step={step} />\n      {step === 1 && <WelcomeMessage />}\n      {step === 2 && <DataDigestion done={() => setStep(3)} />}\n      {step === 3 && <Graph data={getGraphData()} />}\n    </>\n  );\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport AuthCallback from './components/AuthCallback';\nimport InitAuth from './components/InitAuth';\nimport Header from './components/Header';\nimport WorkflowController from './components/WorkflowController';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Router>\n        <Switch>\n          <Route path={`${process.env.PUBLIC_URL}/auth-callback`}>\n            <AuthCallback />\n          </Route>\n          <Route path={`${process.env.PUBLIC_URL}/init-auth`}>\n            <InitAuth />\n          </Route>\n          <Route path={`${process.env.PUBLIC_URL}/`}>\n            <WorkflowController />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Sentry from '@sentry/browser';\n\nif (process.env.NODE_ENV === 'production') {\n  Sentry.init({\n    dsn: 'https://7ef33f9edba24b8aad31ad5801157c48@sentry.io/2201384',\n  });\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}