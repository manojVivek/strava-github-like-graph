{"version":3,"sources":["components/Header/style.module.css","assets/logo.png","components/WelcomeMessage/styles.module.css","components/DataDigestion/styles.module.css","components/Graph/GraphNode/styles.module.css","components/Graph/MonthNode/styles.module.css","commons/strava-utils.js","components/Spinner/index.js","components/AuthCallback/index.js","components/InitAuth/index.js","components/Header/index.js","components/ProgressSteps/index.js","components/WelcomeMessage/index.js","components/DataDigestion/index.js","components/Graph/GraphNode/index.js","components/Graph/MonthNode/index.js","components/Graph/index.js","components/WorkflowController/index.js","App.js","serviceWorker.js","index.js","components/Graph/styles.module.css"],"names":["module","exports","_athlete","userClient","graphData","initializeUserClient","access_token","Strava","client","completeAuthentication","code","a","console","log","oauth","getToken","athlete","processActivitiesData","per_page","before","Math","floor","Date","getTime","after","page","currentBatch","allActivities","listActivities","length","computeGraphData","dayWiseData","today","setMilliseconds","setSeconds","setMinutes","setHours","setDate","getDate","toISOString","split","initializeEmptyDataSctructure","forEach","activity","dataObj","start_date_local","activities","effortLevel","push","type","distanceBasedEffort","distance","getEffortLevel","slabDistance","tolerance","config","client_id","process","client_secret","redirect_uri","Spinner","props","className","spin","style","fontSize","AuthCallback","history","useHistory","useEffect","params","URLSearchParams","window","location","search","get","InitAuth","getRequestAccessURL","scope","Header","cx","styles","header","src","logo","logoImage","alt","Step","Steps","ProgressSteps","step","status","title","icon","Title","Typography","Text","WelcomeMessage","welcomeMessage","level","strong","onClick","DataDigestion","done","dataDigestion","effortToColor","5","4","3","2","1","GraphNode","day","mouseLeaveDelay","mouseEnterDelay","round","reduce","acc","val","node","backgroundColor","MonthNode","month","monthNode","Graph","data","days","Object","keys","reverse","monthRunner","months","Array","from","map","toLocaleString","setMonth","getMonth","activitiesCount","React","useMemo","container","graphContainer","graph","key","WorkflowController","useState","setStep","withRouter","useLocation","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f415debe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"style_header__MlSQ_\",\"logoImage\":\"style_logoImage__1Hwfc\"};","module.exports = __webpack_public_path__ + \"static/media/logo.52946ee0.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcomeMessage\":\"styles_welcomeMessage__1TKJu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataDigestion\":\"styles_dataDigestion__2SQFo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"node\":\"styles_node__1LXWE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"monthNode\":\"styles_monthNode__1qqTP\"};","import Strava from 'strava-v3';\n\nlet _athlete = null;\nlet userClient = null;\nlet graphData = null;\n\nStrava.config({\n  client_id: process.env.REACT_APP_STRAVA_CLIENT_ID,\n  client_secret: process.env.REACT_APP_STRAVA_CLIENT_SECRET,\n  redirect_uri: process.env.REACT_APP_STRAVA_REDIRECT_URI,\n});\n\nfunction initializeUserClient(access_token) {\n  userClient = new Strava.client(access_token);\n}\n\nexport function getRequestAccessURL() {\n  return Strava.oauth.getRequestAccessURL({scope: 'activity:read'});\n}\n\nexport function getAthlete() {\n  return _athlete;\n}\n\nexport async function completeAuthentication(code) {\n  console.log('code:', code);\n  const {access_token, athlete} = await Strava.oauth.getToken(code);\n  console.log('access_token, athlete', access_token, athlete);\n  _athlete = athlete;\n  initializeUserClient(access_token);\n}\n\nexport async function processActivitiesData() {\n  const per_page = 50;\n  const before = Math.floor(new Date().getTime() / 1000);\n  const after =\n    before - 60 /*secs*/ * 60 /*mins*/ * 24 /* hours*/ * 365; /*days*/\n  let page = 1;\n  let currentBatch = [];\n  let allActivities = [];\n  do {\n    currentBatch = await userClient.athlete.listActivities({\n      before,\n      after,\n      page,\n      per_page,\n    });\n    allActivities = [...allActivities, ...currentBatch];\n    page++;\n  } while (currentBatch.length === per_page);\n  graphData = computeGraphData(allActivities, before, after);\n}\n\nexport function getGraphData() {\n  return graphData;\n}\n\nfunction computeGraphData(allActivities, before, after) {\n  const dayWiseData = initializeEmptyDataSctructure(before, after);\n  allActivities.forEach(activity => {\n    const dataObj = dayWiseData[activity.start_date_local.split('T')[0]];\n    if (!dataObj.activities) {\n      dataObj.activities = [];\n      dataObj.effortLevel = 0;\n    }\n    dataObj.activities.push(activity);\n    dataObj.effortLevel += getEffortLevel(activity);\n  });\n  return dayWiseData;\n}\n\nfunction getEffortLevel(activity) {\n  const distanceTolerance = 300;\n  switch (activity.type) {\n    case 'Run':\n      return distanceBasedEffort(activity.distance, 5000, distanceTolerance);\n    case 'Ride':\n      return distanceBasedEffort(activity.distance, 10000, distanceTolerance);\n    case 'Walk':\n      return distanceBasedEffort(activity.distance, 7500, distanceTolerance);\n    default:\n      return 0;\n  }\n}\n\nfunction distanceBasedEffort(distance, slabDistance, tolerance) {\n  if (distance === 0) {\n    return 0;\n  }\n  if (distance < slabDistance - tolerance) {\n    return 1;\n  }\n  return Math.floor((distance + tolerance) / slabDistance + 1);\n}\n\nfunction initializeEmptyDataSctructure(before, after) {\n  const today = new Date(before * 1000);\n  today.setMilliseconds(0);\n  today.setSeconds(0);\n  today.setMinutes(0);\n  today.setHours(0);\n  const dayWiseData = {};\n  for (; today.getTime() / 1000 > after; today.setDate(today.getDate() - 1)) {\n    dayWiseData[today.toISOString().split('T')[0]] = {};\n  }\n  return dayWiseData;\n}\n","import React from 'react';\nimport Icon from 'antd/es/icon';\n\nexport default function Spinner(props) {\n  return (\n    <Icon\n      className={`theme-color align-center ${props.className || ''}`}\n      type=\"loading-3-quarters\"\n      spin\n      style={{fontSize: '30px'}}\n    />\n  );\n}\n","import React, {useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {completeAuthentication} from '../../commons/strava-utils';\nimport Spinner from '../Spinner';\n\nexport default function AuthCallback(props) {\n  const history = useHistory();\n  useEffect(() => {\n    (async () => {\n      const params = new URLSearchParams(window.location.search);\n      console.log('params, location.search', params, window.location.search);\n      await completeAuthentication(params.get('code'));\n      history.push('/');\n    })();\n  }, [history]);\n\n  return <Spinner />;\n}\n","import React, {useEffect} from 'react';\nimport {getRequestAccessURL} from '../../commons/strava-utils';\nimport Spinner from '../Spinner';\n\nexport default function InitAuth() {\n  useEffect(() => {\n    window.location = getRequestAccessURL();\n  }, []);\n  return <Spinner />;\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport styles from './style.module.css';\nimport logo from '../../assets/logo.png';\n\nexport default function Header() {\n  return (\n    <div className={cx(styles.header)}>\n      <img\n        src={logo}\n        className={cx(styles.logoImage)}\n        alt=\"Strava-Github-Like-Graph\"\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport Steps from 'antd/es/steps';\nimport Icon from 'antd/es/icon';\n\nconst {Step} = Steps;\n\nexport default function ProgressSteps({step}) {\n  return (\n    <Steps>\n      <Step\n        status={step < 2 ? 'process' : 'finish'}\n        title=\"Connect Strava\"\n        icon={<Icon type=\"user\" />}\n      />\n      <Step\n        status={step === 2 ? 'process' : step === 1 ? 'wait' : 'finish'}\n        title=\"Data Digestion\"\n        icon={<Icon type=\"experiment\" />}\n      />\n      <Step\n        status={step === 3 ? 'process' : 'wait'}\n        title=\"Visualize\"\n        icon={<Icon type=\"crown\" />}\n      />\n    </Steps>\n  );\n}\n","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\nimport Button from 'antd/es/button';\n\nimport styles from './styles.module.css';\n\nconst {Title, Text} = Typography;\n\nexport default function WelcomeMessage() {\n  const history = useHistory();\n  return (\n    <div className={cx(styles.welcomeMessage)}>\n      <Title level={3} className=\"theme-color\">\n        Authorize\n      </Title>\n      <Text strong className=\"height-200\">\n        App needs access to your Strava activies to show the graph, continue and\n        authorize with your strava account to proceed.\n      </Text>\n      <Button\n        type=\"primary\"\n        icon=\"lock\"\n        className=\"top-space-medium\"\n        onClick={() => history.push('init-auth')}\n      >\n        Allow Strava Access\n      </Button>\n    </div>\n  );\n}\n","import React, {useEffect} from 'react';\nimport cx from 'classnames';\nimport Spinner from '../Spinner';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\nimport {processActivitiesData} from '../../commons/strava-utils';\n\nconst {Title} = Typography;\n\nexport default function DataDigestion({done}) {\n  useEffect(() => {\n    (async () => {\n      await processActivitiesData();\n      done();\n    })();\n  }, [done]);\n  return (\n    <div className={cx(styles.dataDigestion)}>\n      <Title level={3} className=\"theme-color\">\n        Negotiating your data with Strava..\n      </Title>\n\n      <Spinner className=\"top-space-medium\" />\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Tooltip from 'antd/es/tooltip';\n\nimport styles from './styles.module.css';\n\nconst effortToColor = {\n  5: '#E34402',\n  4: '#E96935',\n  3: '#EE8F67',\n  2: '#F4B49A',\n  1: '#F9DACC',\n};\n\nexport default function GraphNode({activities, effortLevel, day}) {\n  return (\n    <Tooltip\n      mouseLeaveDelay={0}\n      mouseEnterDelay={0.05}\n      title={`${\n        activities\n          ? `${activities.length} activit${\n              activities.length === 1 ? 'y' : 'ies'\n            } of ${Math.round(\n              activities.reduce((acc, val) => (acc += val.distance), 0) / 1000\n            )}kms`\n          : 'No activities'\n      } on ${day}`}\n    >\n      <div\n        className={cx(styles.node)}\n        style={{backgroundColor: effortToColor[effortLevel] || '#efefef'}}\n      ></div>\n    </Tooltip>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport Typography from 'antd/es/typography';\n\nimport styles from './styles.module.css';\n\nconst {Text} = Typography;\n\nexport default function MonthNode({month}) {\n  return (\n    <div className={cx(styles.monthNode)}>\n      <Text>{month}</Text>\n    </div>\n  );\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport GraphNode from './GraphNode';\nimport Typography from 'antd/es/typography';\nimport MonthNode from './MonthNode';\n\nimport styles from './styles.module.css';\n\nconst {Text} = Typography;\n\nexport default function Graph({data}) {\n  const days = Object.keys(data).reverse();\n  const monthRunner = new Date(days[0]);\n  const months = Array.from(Array(12)).map(() => {\n    const month = monthRunner.toLocaleString('default', {month: 'short'});\n    monthRunner.setMonth(monthRunner.getMonth() + 1);\n    return month;\n  });\n  const activitiesCount = React.useMemo(\n    () =>\n      Object.keys(data).reduce(\n        (acc, val) => (acc += (data[val].activities || []).length),\n        0\n      ),\n    [data]\n  );\n  return (\n    <>\n      <div className={cx(styles.container, 'top-space-medium')}>\n        <div>\n          <Text>{activitiesCount} activities in the last year</Text>\n        </div>\n        <div className={cx(styles.graphContainer)}>\n          <div className={cx(styles.monthRunner)}>\n            {months.map(month => (\n              <MonthNode month={month} />\n            ))}\n          </div>\n          <div className={cx(styles.graph)}>\n            {days.map(day => (\n              <GraphNode {...data[day]} key={day} day={day} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {getAthlete, getGraphData} from '../../commons/strava-utils';\nimport ProgressSteps from '../ProgressSteps';\nimport WelcomeMessage from '../WelcomeMessage';\nimport DataDigestion from '../DataDigestion';\nimport Graph from '../Graph';\n\nexport default function WorkflowController(props) {\n  const athlete = getAthlete();\n  const [step, setStep] = useState(athlete == null ? 1 : 2);\n  return (\n    <>\n      <ProgressSteps step={step} />\n      {step === 1 && <WelcomeMessage />}\n      {step === 2 && <DataDigestion done={() => setStep(3)} />}\n      {step === 3 && <Graph data={getGraphData()} />}\n    </>\n  );\n}\n","import React from 'react';\nimport {Route, Switch, withRouter, useLocation} from 'react-router-dom';\nimport AuthCallback from './components/AuthCallback';\nimport InitAuth from './components/InitAuth';\nimport Header from './components/Header';\nimport WorkflowController from './components/WorkflowController';\n\nfunction App() {\n  const location = useLocation();\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route path={`${process.env.REACT_APP_BASE_URI}/auth-callback`}>\n          <AuthCallback />\n        </Route>\n        <Route path={`${process.env.REACT_APP_BASE_URI}/init-auth`}>\n          <InitAuth />\n        </Route>\n        <Route path={`${process.env.REACT_APP_BASE_URI}/`}>\n          <WorkflowController />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3B2i6\",\"graphContainer\":\"styles_graphContainer__24ldH\",\"graph\":\"styles_graph__RRI0v\",\"monthRunner\":\"styles_monthRunner__UAYNl\"};"],"sourceRoot":""}